jenkins_home 中重要的目录文件 config.xml   jobs   plugins

升级

1、安装docker jenkins jdk maven gradle
#docker pull jenkins/jenkins:lts
docker pull jenkins/jenkins:jdk17  #2.464      20240628
一定要注意版本，不能太低了，最好直接装最新版本，不一定是lts
创建目录
/home/yematech/docker_data/jenkins_home


#让jenkins使用宿主机的docker
改/var/run/docker.sock
sudo chown root:root /var/run/docker.sock
sudo chmod o+rw /var/run/docker.sock

先创建/etc/docker/daemon.json 文件

创建文件docker-compose.yml  #jenkins
version: "3.1"
services:
  jenkins:
    image: jenkins/jenkins:lts
    restart: unless-stopped
    container_name: jenkins
    environment:
      TZ: Asia/Shanghai
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - ./jenkins_home/:/var/jenkins_home/
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /etc/docker/daemon.json:/etc/docker/daemon.json
###注意目录的权限，保证能读写。这个没有搞明白???
启动:docker compose -f ./docker-compose.yml up -d


docker run \
  --rm \
  -u root \
  -p 8080:8080 \
  -v jenkins-data:/var/jenkins_home \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v "$HOME":/home \
  jenkinsci/blueocean


2、升级docker安装的jenkins
wget -P ./docker_data/jenkins_home http://mirrors.jenkins.io/war/latest/jenkins.war
docker exec -it -u root +ContainerId bash #要以root用户
cp /usr/share/jenkins/jenkins.war /usr/share/jenkins/jenkinsBAK.war
cp /var/jenkins_home/jenkins.war /usr/share/jenkins/
docker restart jenkins



一、解决插件安装问题，加速Jenkins安装插件速度
在jenkins_home目录下。修改 vi hudson.model.UpdateCenter.xml里的内容
所url改为 https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
http://updates.jenkins.io/update-center.json  //这个需要测试

输入url http://192.168.0.99:8080 进行访问。
密码在 jenkins_home/secrets/initialAdminPassword 中


追加如下plugins
blue ocean
chinese
locale
git parameter plug-in
git plug-in
publish over ssh  #推送文件到远程ssh 服务
ssh pipeline
nodejs
Active Choices Plugin
Extended Choice Parameter
Pipeline: Stage View
Maven Release Plug-in
rebuilder
ansicolor
Monitoring
gitlab
Docker Pipeline
Console Column Plugin
Version Number
Hidden Parameter plugin
Job Configuration History Plugin
timestamper
  options{timestamps()}
dingtalk
  https://jenkinsci.github.io/dingtalk-plugin/
Role-Based Strategy
 需要在jenkins的全局安全配置中启用它，授权中选Role-based strategy
-----------------------------------------------
build user vars
        wrap([$class: 'BuildUser']) {
          script {
            //获取当前登录用户账户、姓名、邮箱
            Applier_id = "${BUILD_USER_ID}"
            THE_USER_ID=Applier_id
            Applier_name = "${env.BUILD_USER}"
            Applier_mail = "${env.BUILD_USER_EMAIL}"
          }
          script{
            println Applier_id
          }
        }
-----------------------------------------------
Email Extension Plugin
Email Extension Template

smtp.sina.com
@sina.com
用户名:yema_no_reply@sina.com
#为授权码，不是邮箱密码
密码:5ae81bcdd09653ff
使用ssl协议
port:465
注意：系统管理员邮件地址要和邮件通知中的用户一致
https://juejin.cn/post/6844904119707123719
https://blog.csdn.net/GLYX5717/article/details/119747860
----------------------------------------------

#把jdk&maven移到jenkins的docker mapping目录
jdk & maven
mv /usr/local/jdk/ /localhost/.../jenkins_home/
mv /usr/local/maven/ /localhost/.../jenkins_home/

改maven的settings.xml
一、增加aliyun或华为云的mirror
    <mirror>
      <id>nexus-aliyun</id>
      #<mirrorOf>*</mirrorOf>
      <mirrorOf>central</mirrorOf>
      <name>Nexus aliyun</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
    </mirror>
    
    or 
    
    <mirror>
      <id>huaweicloud</id>
      <mirrorOf>*</mirrorOf>
      <url>https://repo.huaweicloud.com/repository/maven/</url>
    </mirror>
    
二、增加jdk1.8的编译插件

    <profile>
      <id>jdk18</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <jdk>1.8</jdk>
      </activation>
      <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>  <!-- JRE System Liblary 的版本和这句相同  -->
          <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
      </properties>
    </profile>

三、开启jdk Profile
  <activeProfiles>
    <activeProfile>jdk18</activeProfile>
  </activeProfiles>



#在jenkins中install jdk maven
manage jenkins -> system configuration -> tools
都不自动安装，都采用手动，/var/jenkins_home/jdk-17.0.4.1等等，maven：/var/jenkins_home/apache-maven-3.9.6。






======================================================
安装harbor
解压harbor包，进入目录，cp harbor.yml.tmpl harbor.yml 文件。 #??? 目前只能用sudo启动。需要后面调整
vim harbor.yml，改hostname，注掉 https，可改admin的password，安装./install.sh。进行安装，安装一堆docker images 且没有报错。
http://192.168.0.99  admin Harbor12345， 进harbor系统创建一个公有仓库。

对镜像的要求：harbor地址/项目名/镜像名:版本  -> docker tag 1d7027..df 192.168.0.99:80/repo/mytest:v1.0.0
对docker登录harbor： docker login -u admin -p Harbor12345 192.168.0.99:80
docker push 192.168.0.99:80/repo/mytest:v1.0.0

#就在jenkins服务器上设置
vim /etc/docker/daemon.json
{
	"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn/"],
	"insecure-registries": ["192.168.0.99:80"]
}
需要重启docker服务。

如果要更改harbor的相关参数。
sudo docker compose -f ./docker-compose.yml down
改harbor.yml文件
sudo docker compose -f ./docker-compose.yml up -d


=====================================================
#Dockerfile
FROM openjdk:17-jdk-alpine
COPY costing-report-0.0.1-SNAPSHOT.jar /usr/local
WORKDIR /usr/local
CMD ["java","-jar","costing-report-0.0.1-SNAPSHOT.jar"]




=====================================================

#pipeline 服务
pipeline {
    // 指定任务在哪个集群节点中执行。
    agent any
    
    //声明全局变量
    environment{
        thePath = '/var/jenkins_home'
        harborUsername='admin'
        harborPassword='Harbor12345'
        harborAddress='192.168.0.99:80'
        harborRepo='ym_repo'
    }

    stages {
        stage('pull gitlab codes') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '25bcfcb1-a7fe-4fcc-9415-8005a62d339f', url: 'https://git.smarte.tech:50010/jupiter/backend/costing/costing-report.git']])
            }
        }
        stage('gradle build project') {
            steps {
                sh '''$thePath/gradle-8.7/bin/gradle clean build'''
                 }
        }
        stage('SonarQube') {
            steps {
                echo 'SonarQube check'
            }
        }
        stage('docker build images') {
            steps {
                sh '''mv ./app/build/libs/costing-report-0.0.1-SNAPSHOT.jar ./docker/
docker build -t ${JOB_NAME}:${tag} ./docker/'''
            }
        }
        stage('images pull harbor') {
            steps {
                   sh '''docker login -u ${harborUsername} -p ${harborPassword} ${harborAddress}
        docker tag ${JOB_NAME}:${tag} ${harborAddress}/${harborRepo}/${JOB_NAME}:${tag}
        docker push ${harborAddress}/${harborRepo}/${JOB_NAME}:${tag}'''
            }
        }
        stage('publish over ssh') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: '', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "deploy.sh $harborAddress $harborRepo", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
      
    }
}



========================================================

docker image prune -f #删除docker 'none' 镜像


通知服务器运行应用程序
1、告知目标服务器拉取哪个镜像1、告知目标服务器拉取哪个镜像
2、判断当前服务器是否正在运行窗口，需要删除
3、如果目标服务器已经存在当前镜像，需要删除
4、目标服务器拉取harbor上的镜像
5、将拉取下来的镜像运行成容器

harbor地址/harbor仓库/镜像名:镜像版本/端口号

deploy.sh
horbar_addr=$1
horbar_repo=$2
project=$3
version=$4
container_port=$5
host_port=$6

imageName=$horbar_addr/$horbar_repo/$project:$version

echo $imageName

containerId=`docker ps -a | grep ${project} | awk '{print $1}'`
echo $containerId

if [ "$containerId" != "" ] ; then
    docker stop $containerId
    docker rm $containerId
fi

tag=`docker images | grep ${project} | awk '{print $1}'`
echo $tag

if [[ "$tag" =~ "$version" ]]; then  #只要值包含
    docker rmi -f $imageName
fi

docker login -u admin -p Harbor12345 $horbar_addr

docker image prune -f 

docker pull $imageName

docker run -d -p $host_port:$container_port --name $project $imageName

echo "SUCESS"


#./deploy.sh 192.168.0.99:80 ym_repo pipeline_test main_test 8081


========================================================================
pipeline {
    // 指定任务在哪个集群节点中执行。
    agent any
    
    //声明全局变量
    environment{
        thePath = '/var/jenkins_home'
        harborUsername='admin'
        harborPassword='Harbor12345'
        harborAddress='192.168.0.99:80'
        harborRepo='ym_repo'
        tag='main_test'
    }

    stages {
        stage('pull gitlab codes') {
            steps {
                echo "git pull"
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '25bcfcb1-a7fe-4fcc-9415-8005a62d339f', url: 'https://git.smarte.tech:50010/jupiter/backend/costing/costing-report.git']])
            }
        }
        stage('gradle build project') {
            steps {
                //echo "build project"
               sh '''$thePath/gradle-8.7/bin/gradle clean build'''
                 }
        }
        stage('SonarQube') {
            steps {
                echo 'SonarQube check'
                echo "${JOB_NAME}"
                echo "${tag}"
            }
        }
        stage('Docker build images') {
            steps {
                // echo "build images"
                sh '''mv ./app/build/libs/costing-report-0.0.1-SNAPSHOT.jar ./docker/
docker build -t ${JOB_NAME}:${tag} ./docker/'''
            }
        }
        stage('images pull harbor') {
            steps {
                // echo "pull harbor"
                   sh '''docker login -u ${harborUsername} -p ${harborPassword} ${harborAddress}
        docker image prune -f 
        docker tag ${JOB_NAME}:${tag} ${harborAddress}/${harborRepo}/${JOB_NAME}:${tag}
        docker push ${harborAddress}/${harborRepo}/${JOB_NAME}:${tag}'''
            }
        }
        stage('publish over ssh ') {
            steps {
                  sshPublisher(publishers: [sshPublisherDesc(configName: 'ym_cost_app', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "./deploy.sh $harborAddress $harborRepo ${JOB_NAME} $tag 8081", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
      
    }
}
